# Camada de persistÃªncia

import sqlite3
import tkinter as tk
from tkinter import messagebox, ttk

def init_db():
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS data (
            key TEXT PRIMARY KEY,
            value INTEGER
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS log (
            transaction_id INTEGER,
            operation TEXT,
            key TEXT,
            value INTEGER,
            PRIMARY KEY(transaction_id, operation, key)
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS commit_log (
            transaction_id INTEGER PRIMARY KEY
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS abort_log (
            transaction_id INTEGER PRIMARY KEY
        )
    ''')
    conn.commit()
    return conn

def get_value(conn, key):
    cursor = conn.cursor()
    cursor.execute('SELECT value FROM data WHERE key = ?', (key,))
    result = cursor.fetchone()
    return result[0] if result else None

def set_value(conn, key, value):
    cursor = conn.cursor()
    cursor.execute('REPLACE INTO data (key, value) VALUES (?, ?)', (key, value))
    conn.commit()

def log_operation(conn, transaction_id, operation, key, value):
    cursor = conn.cursor()
    cursor.execute('INSERT INTO log (transaction_id, operation, key, value) VALUES (?, ?, ?, ?)', (transaction_id, operation, key, value))
    conn.commit()

def log_commit(conn, transaction_id):
    cursor = conn.cursor()
    cursor.execute('INSERT INTO commit_log (transaction_id) VALUES (?)', (transaction_id,))
    conn.commit()

def get_log(conn):
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM log')
    return cursor.fetchall()

def get_commit_log(conn):
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM commit_log')
    return cursor.fetchall()


def populate_initial_data(conn):
    initial_data = {
        "A": 100,
        "B": 200, 
        "C": 300
    }
    cursor = conn.cursor()
    for key, value in initial_data.items():
        cursor.execute('REPLACE INTO data (key, value) VALUES (?, ?)', (key, value))
    conn.commit()

class TransactionManager:
    def __init__(self, conn):
        self.conn = conn
        self.cache = {}
        self.current_transaction = None

    def clear_log(self, transaction_id):
        cursor = self.conn.cursor()
        cursor.execute('DELETE FROM log WHERE transaction_id =?', (transaction_id,))
        self.conn.commit()

    def start_transaction(self, transaction_id):
        self.current_transaction = transaction_id
        self.cache = {}

    def read(self, key):
        if key in self.cache:
            return self.cache[key]
        else:
            value = get_value(self.conn, key)
            log_operation(self.conn, self.current_transaction, 'read', key, value)
            return value

    def write(self, key, value):
        if key in self.cache:
            # clear the log entries for the previous transaction
            self.clear_log(self.current_transaction)
        self.cache[key] = value
        log_operation(self.conn, self.current_transaction, 'write', key, value)

    def commit(self):
        for key, value in self.cache.items():
            set_value(self.conn, key, value)
        log_commit(self.conn, self.current_transaction)
        self.cache = {}
        transaction_id = self.current_transaction
        self.current_transaction = None

        # Clear log entries for previous transactions that were affected by this transaction
        cursor = self.conn.cursor()
        cursor.execute('''
            DELETE FROM log
            WHERE transaction_id IN (
                SELECT l.transaction_id
                FROM log l
                JOIN (
                    SELECT key, MAX(transaction_id) AS max_transaction_id
                    FROM log
                    WHERE operation = 'write'
                    GROUP BY key
                ) m ON l.key = m.key AND l.transaction_id < m.max_transaction_id
            )
        ''')
        self.conn.commit()

    def abort(self):
        self.cache = {}
        transaction_id = self.current_transaction
        self.current_transaction = None
        self.clear_log(transaction_id)  # clear log entries for this transaction
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO abort_log (transaction_id) VALUES (?)', (transaction_id,))
        self.conn.commit()

    def checkpoint(self):
        cursor = self.conn.cursor()
        cursor.execute('SELECT transaction_id FROM commit_log')
        committed_transactions = [row[0] for row in cursor.fetchall()]
        cursor.execute('DELETE FROM log WHERE transaction_id IN (%s)' % ','.join(map(str, committed_transactions)))
        self.conn.commit()

    def recover(self):
        cursor = self.conn.cursor()
        cursor.execute('SELECT transaction_id FROM commit_log')
        committed_transactions = {row[0] for row in cursor.fetchall()}
        cursor.execute('SELECT transaction_id, operation, key, value FROM log')
        for transaction_id, operation, key, value in cursor.fetchall():
            if transaction_id in committed_transactions and operation == 'write':
                set_value(self.conn, key, value)
 #       self.clear_log(None)  # clear the log after recovery


class DBApp:
    def __init__(self, root, transaction_manager):
        self.root = root
        self.tm = transaction_manager

        # Top-left corner: Transaction ID, Key, and Value
        self.top_frame = tk.Frame(root)
        self.top_frame.pack(side=tk.TOP, fill=tk.X)
        self.trans_label = tk.Label(self.top_frame, text="Transaction ID:")
        self.trans_label.pack(side=tk.LEFT)
        self.trans_combobox = ttk.Combobox(self.top_frame, values=self.get_transaction_ids())
        self.trans_combobox.pack(side=tk.LEFT)
        self.key_label = tk.Label(self.top_frame, text="Key:")
        self.key_label.pack(side=tk.LEFT)
        self.key_entry = tk.Entry(self.top_frame)
        self.key_entry.pack(side=tk.LEFT)
        self.value_label = tk.Label(self.top_frame, text="Value:")
        self.value_label.pack(side=tk.LEFT)
        self.value_entry = tk.Entry(self.top_frame)
        self.value_entry.pack(side=tk.LEFT)



        # Operation buttons
        self.button_frame = tk.Frame(root)
        self.button_frame.pack(side=tk.TOP, fill=tk.X)
        self.start_button = tk.Button(self.button_frame, text="Start Transaction", command=self.start_transaction, bg='#4CAF50', fg='white', font=('bold', 10))
        self.start_button.pack(side=tk.LEFT)
        self.read_button = tk.Button(self.button_frame, text="Read", command=self.read, bg='#F7DC6F', fg='black', font=('bold', 10))
        self.read_button.pack(side=tk.LEFT)
        self.write_button = tk.Button(self.button_frame, text="Write", command=self.write, bg='#F7DC6F', fg='black', font=('bold', 10))
        self.write_button.pack(side=tk.LEFT)
        self.commit_button = tk.Button(self.button_frame, text="Commit", command=self.commit, bg='#F7DC6F', fg='black', font=('bold', 10))
        self.commit_button.pack(side=tk.LEFT)
        self.abort_button = tk.Button(self.button_frame, text="Abort", command=self.abort, bg='#F44336', fg='white', font=('bold', 10))
        self.abort_button.pack(side=tk.LEFT)
        self.recover_button = tk.Button(self.button_frame, text="Recover", command=self.recover, bg='#2196F3', fg='white', font=('bold', 10))
        self.recover_button.pack(side=tk.LEFT)
        self.checkpoint_button = tk.Button(self.button_frame, text="Checkpoint", command=self.checkpoint, bg='#FF9800', fg='white', font=('bold', 10))
        self.checkpoint_button.pack(side=tk.LEFT)
        self.restart_button = tk.Button(self.button_frame, text="Restart", command=self.restart, bg='black', fg='white', font=('bold', 10))
        self.restart_button.pack(side=tk.LEFT)

        # Center: Current Cache, Abort Log, and Recovery Log
        self.center_frame = tk.Frame(root)
        self.center_frame.pack(side=tk.TOP, fill=tk.BOTH, expand=True)
        self.cache_frame = tk.LabelFrame(self.center_frame, text="Current Cache")
        self.cache_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        self.cache_text = tk.Text(self.cache_frame, height=10, width=40)
        self.cache_text.pack(fill=tk.BOTH, expand=True)
        self.abort_log_frame = tk.LabelFrame(self.center_frame, text="Abort Log")
        self.abort_log_frame.pack(side=tk.LEFT, fill=tk.Y)
        self.abort_log_tree = ttk.Treeview(self.abort_log_frame, columns=("transaction_id",), show='headings')
        self.abort_log_tree.heading("transaction_id", text="Transaction ID")
        self.abort_log_tree.pack(fill=tk.Y)
        self.recovery_log_frame = tk.LabelFrame(self.center_frame, text="Recovery Log")
        self.recovery_log_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        self.recovery_log = tk.Text(self.recovery_log_frame, height=10, width=40)
        self.recovery_log.pack(fill=tk.BOTH, expand=True)
        self.checkpoint_frame = tk.LabelFrame(self.center_frame, text="Checkpoint")
        self.checkpoint_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        self.checkpoint_text = tk.Text(self.checkpoint_frame, height=10, width=40)
        self.checkpoint_text.pack(fill=tk.BOTH, expand=True)

        # Right: Log and Commit Log
        self.log_frame = tk.LabelFrame(root, text="Logs")
        self.log_frame.pack(side=tk.TOP, fill=tk.BOTH, expand=True)
        self.log_tree = ttk.Treeview(self.log_frame, columns=("transaction_id", "operation", "key", "value"), show='headings')
        self.log_tree.heading("transaction_id", text="Transaction ID")
        self.log_tree.heading("operation", text="Operation")
        self.log_tree.heading("key", text="Key")
        self.log_tree.heading("value", text="Value")
        self.log_tree.pack(fill=tk.BOTH, expand=True)
        self.commit_log_frame = tk.LabelFrame(root, text="Commit Log")
        self.commit_log_frame.pack(side=tk.TOP, fill=tk.BOTH, expand=True)
        self.commit_log_tree = ttk.Treeview(self.commit_log_frame, columns=("transaction_id",), show='headings')
        self.commit_log_tree.heading("transaction_id", text="Transaction ID")
        self.commit_log_tree.pack(fill=tk.BOTH, expand=True)


        self.update_abort_log()
        self.update_logs()


    def get_transaction_ids(self):
        cursor = self.tm.conn.cursor()
        cursor.execute('''
            SELECT MAX(transaction_id) FROM commit_log
        ''')
        last_committed_id = cursor.fetchone()[0]
        if last_committed_id is None:
            last_committed_id = 0
        cursor.execute('''
            SELECT transaction_id FROM abort_log
        ''')
        aborted_ids = [row[0] for row in cursor.fetchall()]
        return [i for i in range(last_committed_id + 1, last_committed_id + 6) if i not in aborted_ids]

    def update_cache_display(self):
            self.cache_text.delete(1.0, tk.END)  # clear the text widget
            cache = self.tm.cache
            for key, value in cache.items():
                self.cache_text.insert(tk.END, f"{key}: {value}\n")

    def update_transaction_ids(self):
        self.trans_combobox['values'] = self.get_transaction_ids()


    def start_transaction(self):
        self.transaction_id = int(self.trans_combobox.get())
        self.tm.start_transaction(self.transaction_id)
        self.update_cache_display()
        messagebox.showinfo("Transaction", f"Transaction {self.transaction_id} started")
        self.update_transaction_ids()

    def read(self):
        key = self.key_entry.get()
        if key:
            value = self.tm.read(key)
            messagebox.showinfo("Read", f"Value for {key}: {value}")
            self.update_logs()

    def write(self):
        key = self.key_entry.get()
        value = self.value_entry.get()
        if key and value:
            self.tm.write(key, int(value))
            messagebox.showinfo("Write", f"Written {value} to {key}")
            self.update_logs()
            self.update_cache_display()

    def commit(self):
        self.tm.commit()
        messagebox.showinfo("Commit", f"Transaction {self.transaction_id} committed")
        self.update_logs()
        self.update_cache_display()

    def abort(self):
        self.tm.abort()
        messagebox.showinfo("Abort", f"Transaction {self.transaction_id} aborted")
        self.update_logs()

    def recover(self):
        cursor = self.tm.conn.cursor()
        cursor.execute('SELECT transaction_id FROM commit_log')
        committed_transactions = {row[0] for row in cursor.fetchall()}
        self.recovery_log.insert(tk.END, f"Committed transactions: {committed_transactions}\n")
        cursor.execute('SELECT transaction_id, operation, key, value FROM log')
        for transaction_id, operation, key, value in cursor.fetchall():
            if transaction_id in committed_transactions and operation == 'write':
                self.recovery_log.insert(tk.END, f"Redoing write operation: transaction_id={transaction_id}, key={key}, value={value}\n")
                set_value(self.tm.conn, key, value)
        self.tm.clear_log(None)  # clear the log after recovery
        self.recovery_log.insert(tk.END, "Recovery complete\n")

    def checkpoint(self):
        self.tm.checkpoint()
        cursor = self.tm.conn.cursor()
        cursor.execute('SELECT * FROM data')
        consistent_state = '\n'.join(f'{key}: {value}' for key, value in cursor.fetchall())
        self.checkpoint_text.delete(1.0, tk.END)
        self.checkpoint_text.insert(tk.END, consistent_state)
        messagebox.showinfo("Checkpoint", "Checkpoint created")

    def restart(self):
        self.tm.conn.execute('DELETE FROM data')
        self.tm.conn.execute('DELETE FROM log')
        self.tm.conn.execute('DELETE FROM commit_log')
        self.tm.conn.execute('DELETE FROM abort_log')
        self.tm.conn.commit()
        self.update_cache_display()
        self.update_logs()
        self.checkpoint_text.delete(1.0, tk.END)
        messagebox.showinfo("Restart", "Database restarted")

    def update_logs(self):
        for item in self.log_tree.get_children():
            self.log_tree.delete(item)
        logs = get_log(self.tm.conn)
        for log in logs:
            self.log_tree.insert("", "end", values=log)

        for item in self.commit_log_tree.get_children():
            self.commit_log_tree.delete(item)
        commit_logs = get_commit_log(self.tm.conn)
        for log in commit_logs:
            self.commit_log_tree.insert("", "end", values=log)

    def update_abort_log(self):
        for item in self.abort_log_tree.get_children():
            self.abort_log_tree.delete(item)
        cursor = self.tm.conn.cursor()
        cursor.execute('SELECT * FROM abort_log')
        for row in cursor.fetchall():
            self.abort_log_tree.insert("", "end", values=row)

def main():
    conn = init_db()
    populate_initial_data(conn)
    tm = TransactionManager(conn)

    root = tk.Tk()
    app = DBApp(root, tm)
    root.mainloop()

if __name__ == "__main__":
    main()
